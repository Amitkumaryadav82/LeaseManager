import boto3
import faiss
import numpy as np
from io import BytesIO

# Initialize S3 client
s3 = boto3.client('s3')

def read_documents_from_s3(bucket_name):
    # List objects in the bucket
    response = s3.list_objects_v2(Bucket=bucket_name)
    documents = []
    
    for obj in response.get('Contents', []):
        # Read each document
        file_obj = s3.get_object(Bucket=bucket_name, Key=obj['Key'])
        document = file_obj['Body'].read().decode('utf-8')
        documents.append(document)
    
    return documents

def convert_to_faiss_vectors(documents):
    # Dummy vectorization for example purposes
    vectors = [np.random.rand(512).astype('float32') for _ in documents]
    return np.array(vectors)

def store_vectors_in_s3(vectors, bucket_name, key):
    # Convert vectors to bytes
    vectors_bytes = BytesIO()
    np.save(vectors_bytes, vectors)
    vectors_bytes.seek(0)
    
    # Upload to S3
    s3.put_object(Bucket=bucket_name, Key=key, Body=vectors_bytes.getvalue())

# Define your S3 buckets
source_bucket = 'your-source-bucket'
destination_bucket = 'your-destination-bucket'
destination_key = 'faiss_vectors.npy'

# Read documents from S3
documents = read_documents_from_s3(source_bucket)

# Convert documents to FAISS vectors
vectors = convert_to_faiss_vectors(documents)

# Store vectors in S3
store_vectors_in_s3(vectors, destination_bucket, destination_key)

print("FAISS vectors have been stored successfully.")
Explanation:
Reading Documents: The read_documents_from_s3 function lists and reads all documents from the specified S3 bucket.
Converting to FAISS Vectors: The convert_to_faiss_vectors function converts the documents into FAISS vectors. Here, I'm using random vectors for simplicity. You should replace this with your actual vectorization logic.
Storing Vectors: The store_vectors_in_s3 function saves the vectors as a .npy file and uploads it to the specified S3 bucket.
Feel free to modify the vectorization logic as per your requirements. Let me know if you need any further assistance!